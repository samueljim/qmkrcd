#!/usr/bin/env node
'use strict'
const request = require('request')
const yargs = require('yargs/yargs')
const { commandToBytes } = require('../qmk-rc.js')
const http = require('http')
const HID = require('node-hid');
const jsonBody = require('body/json')
const sendJson = require('send-data/json')
const DEVICES = require('../devices')

const argv = yargs(process.argv.slice(2))
  .option('host', {
    alias: 'h',
    description: 'Host to listen on',
    'default': '127.0.0.1',
  })
  .option('port', {
    alias: 'p',
    description: 'Port to listen on',
    'default': 9916,
  })
  .argv

var devices = HID.devices();

const DEFAULT_USAGE = {
  usage: 0x61,
  usagePage: 0xFF60
}

const readableDeviceName = (spec) => 
  [spec.MANUFACTURER, spec.PRODUCT]
    .filter(Boolean)
    .join(' ')

const getTargetDevice = (target) => {
  const targetRe = new RegExp(target.toLowerCase())

  const targetDevice = DEVICES.filter(device =>
    readableDeviceName(device).toLowerCase().match(targetRe)
  )

  if (targetDevice.length === 0) {
    console.log('no such device known')
    process.exit(3)
  }
  else if (targetDevice.length > 1) {
    console.log('multiple devices matched:')
    console.log(targetDevice
      .map(spec =>
        `  * ${readableDeviceName(spec)}`
      )
      .join('\n')
    )
    process.exit(4)
  }

  return targetDevice[0]
}

const writeCommand = (kbd, command) => {
  const bytes = commandToBytes(command)
  kbd.write(bytes)
  return bytes
}


const onerror = (err) => {
  console.log(err)
  process.exit(1)
}

const targetSpec = process.argv[2] 
const target = targetSpec && getTargetDevice(targetSpec)

const device = devices.find(d =>
  (target ?
    (d.vendorId === target.VENDOR_ID &&
    d.productId === target.PRODUCT_ID) : true)
  &&
    d.usage === DEFAULT_USAGE.usage &&
    d.usagePage === DEFAULT_USAGE.usagePage
)

if (!device) {
  console.error('device not found (is the device connected? is raw HID enabled?)')
  console.error('following devices were detected:')
  console.log(devices)
  process.exit(2)
}

const kbd = new HID.HID(device.path)
kbd.on('error', onerror)

console.log(`connected to ${device.manufacturer} ${device.product}`)

const server = http.createServer((req, res) => {
  if (req.method !== 'POST' || req.url !== '/command') {
    res.writeHead(404)
    return res.end()
  }

  jsonBody(req, res, (err, body) => {
    if (err) {
      return sendJson(req, res, {
        statusCode: 400,
        body: { message: 'Bad Request' }
      })
    }

    if (typeof body.id === 'undefined') {
      return sendJson(req, res, {
        statusCode: 400,
        body: { message: '`id` field is required' }
      })
    }
    
    const bytesSent = writeCommand(kbd, body)
    return sendJson(req, res, {
      statusCode: 200,
      body: {
        message: 'Command sent',
        bytes: bytesSent
      }
    })
  })
})

 
if (kbd) {
  // const say = (text) => {
  //   if (kbd) {
  //    kbd.write(commandToBytes({id: 2, data: ""}));
  //    let bite = commandToBytes({
	// 			id: 1,
	// 			data: text,
	// 		});
  //     kbd.write(bite);
  //   }
	// };

  writeCommand(kbd, { id: 3, data: "loading" });
  // get the weather in brisbane from openweathermap.org and print it out
  let weather
  const getWeather = async () => {
    request(
			"http://api.openweathermap.org/data/2.5/weather?q=brisbane&units=metric&APPID=78f85d611003bb90d180d7ba145484f4",
			(err, res, body) => {
				if (err) return console.error(err);
			  weather = JSON.parse(body);
			}
		);
    return true
  }
  setInterval(() => {
   getWeather()
  }, 300000);
   getWeather()

  // setInterval(() => {
    var datetime = new Date(new Date()).toString().split(" ")[4];
    if (weather) {
      writeCommand(kbd, {
        id: 3,
        data: `${datetime} - cc${weather.main.temp}C    ${weather.weather[0].description}`
      });
    } else {
     writeCommand(kbd, { id: 3, data: `${datetime} loading weather` });
    }
	// }, 2000);
}

server.listen(argv.port, argv.host, (err) => {
	if (err) throw err;
	console.log(`listening on port ${server.address().port}`);
});