#!/usr/bin/env node
'use strict'
const request = require('request')
const yargs = require('yargs/yargs')
const { commandToBytes } = require('../qmk-rc.js')
const http = require('http')
const HID = require('node-hid');
const jsonBody = require('body/json')
const sendJson = require('send-data/json')
const DEVICES = require('../devices')
// const { usb, getDeviceList } = require("usb");
// const devices = getDeviceList();
  
function wait(ms) {
  return new Promise((resolve) => {
    setTimeout(resolve, ms);
  });
}

const argv = yargs(process.argv.slice(2))
  .option('host', {
    alias: 'h',
    description: 'Host to listen on',
    'default': '127.0.0.1',
  })
  .option('port', {
    alias: 'p',
    description: 'Port to listen on',
    'default': 9916,
  })
  .argv

var devices = HID.devices();

const DEFAULT_USAGE = {
  usage: 0x61,
  usagePage: 0xFF60
}

const readableDeviceName = (spec) => 
  [spec.MANUFACTURER, spec.PRODUCT]
    .filter(Boolean)
    .join(' ')

const getTargetDevice = (target) => {
  const targetRe = new RegExp(target.toLowerCase())

  const targetDevice = DEVICES.filter(device =>
    readableDeviceName(device).toLowerCase().match(targetRe)
  )

  if (targetDevice.length === 0) {
    console.log('no such device known')
    process.exit(3)
  }
  else if (targetDevice.length > 1) {
    console.log('multiple devices matched:')
    console.log(targetDevice
      .map(spec =>
        `  * ${readableDeviceName(spec)}`
      )
      .join('\n')
    )
    process.exit(4)
  }

  return targetDevice[0]
}

const writeCommand = (command) => {
  try {
    const bytes = commandToBytes(command)
    if (keyboard) {
      keyboard.write(bytes);
    } else {
      keyboard = getDevice();
    }
  } catch (e) {
    keyboard = false
    // console.log(e) 
  }
}

const targetSpec = process.argv[2];
const target = targetSpec && getTargetDevice(targetSpec);

let keyboard
const getDevice = () => {
  const devices = HID.devices();
  const device = devices.find(
    (d) =>
      (target
        ? d.vendorId === target.VENDOR_ID && d.productId === target.PRODUCT_ID
        : true) &&
      d.usage === DEFAULT_USAGE.usage &&
      d.usagePage === DEFAULT_USAGE.usagePage
  );
  if (device && device.path) {
    try {
      let kbd = new HID.HID(device.path);
      return kbd;
    } catch (e) {
      console.log(e)
      return false; 
      // can't connect to device
    }
  }
  return false; 
}

// const onerror = (err) => {
//   console.log(err)
//   process.exit(1)
// }

// if (!device) {
//   console.error('device not found (is the device connected? is raw HID enabled?)')
//   console.error('following devices were detected:')
//   console.log(devices)
//   process.exit(2)
// }

// let kbd = new HID.HID(device.path)
// kbd.on('error', onerror)

// console.log(`connected to ${device.manufacturer} ${device.product}`)

// const server = http.createServer((req, res) => {
//   if (req.method !== 'POST' || req.url !== '/command') {
//     res.writeHead(404)
//     return res.end()
//   }

//   jsonBody(req, res, (err, body) => {
//     try {
//       if (err) {
//         console.log(err);
//         let error = sendJson(req, res, {
//           statusCode: 400,
//           body: { message: "Bad Request" },
//         });
//         return error;
//       }

//       if (typeof body.id === "undefined") {
//         let error = sendJson(req, res, {
//           statusCode: 400,
//           body: { message: "`id` field is required" },
//         });
//         return error;
//       }

//       const bytesSent = writeCommand(kbd, body);
//       let message = sendJson(req, res, {
//         statusCode: 200,
//         body: {
//           message: "Command sent",
//           bytes: bytesSent,
//         },
//       });
//       return message;
//     } catch (e) {
//       console.log(e);
//     }
//   })
// })

let weather = false;
const getWeather = async () => {
  return new Promise((resolve, reject) => {
    request(
      "http://api.openweathermap.org/data/2.5/weather?q=brisbane&units=metric&APPID=78f85d611003bb90d180d7ba145484f4",
      (err, res, body) => {
        if (err) return reject(err);
        weather = JSON.parse(body);
        resolve(weather);
      }
    );
  });
};

class Weather {
  constructor() {
    getWeather()
      .then((res) => {
        this.weather = res;
      })
      .catch((err) => {
        console.log(err);
      });
    setInterval(() => {
      getWeather()
        .then((res) => {
          this.weather = res;
        })
        .catch((err) => {
          console.log(err);
        });
    }, 600000);
  }
 
  get temp() {
    if (this.weather && this.weather.main && this.weather.main.temp) {
      return Math.floor(this.weather.main.temp);
    }
  }
  get description() {
    if (
      this.weather && this.weather.weather &&
      this.weather.weather[0]
    ) {
      return this.weather.weather[0].main;
    }
  }
}

const brisbane = new Weather();
async function talkToKeyboard(screen) {
  while(true) {
    if (process.platform  === "darwin") {
      await wait(500);
    }
    var datetime = new Date(new Date()).toString().split(" ")[4].toString();
    let output = `${datetime}\n\n${brisbane.temp || ""}C ${brisbane.description || ""}`;
    writeCommand({
      id: 3,
      data: `${output}`,
    });
    if (process.platform === "darwin") {
      await wait(500);
    } else {
      await wait(1000);
    }
  }
}
talkToKeyboard()

// if (kbd) {
 
  // const say = (text) => {
  //   if (kbd) {
  //    kbd.write(commandToBytes({id: 2, data: ""}));
  //    let bite = commandToBytes({
  // 			id: 1,
  // 			data: text,
  // 		});
  //     kbd.write(bite);
  //   }
  // };

  // writeCommand(kbd, { id: 3, data: "po poop" });
  // get the weather in brisbane from openweathermap.org and print it out
 

  // if (process.platform !== "darwin") {
  //   setInterval(() => {
  //     let output = `${datetime} - ${brisbane.temp || "loading"}C    ${
  //       brisbane.description || "loading"
  //     }`;
  //     console.log(output);
  //     writeCommand(kbd, {
  //       id: 3,
  //       data: output,
  //     });
  //   }, 1000);
  // }
// }

// server.listen(argv.port, argv.host, (err) => {
// 	if (err) throw err;
// 	console.log(`listening on port ${server.address().port}`);
// });